파티 다국어

문제
{
N개의 숫자로 구분된 각각의 마을에 한 명의 학생이 살고 있다.

어느 날 이 N명의 학생이 X (1 ≤ X ≤ N)번 마을에 모여서 파티를 벌이기로 했다. 

이 마을 사이에는 총 M개의 단방향 도로들이 있고 i번째 길을 지나는데 Ti(1 ≤ Ti ≤ 100)의 시간을 소비한다.

각각의 학생들은 파티에 참석하기 위해 걸어가서 다시 그들의 마을로 돌아와야 한다. 

하지만 이 학생들은 워낙 게을러서 최단 시간에 오고 가기를 원한다.

이 도로들은 단방향이기 때문에 아마 그들이 오고 가는 길이 다를지도 모른다. 

N명의 학생들 중 오고 가는데 가장 많은 시간을 소비하는 학생은 누구일지 구하여라.
}

입력
{
첫째 줄에 N(1 ≤ N ≤ 1,000), M(1 ≤ M ≤ 10,000), X가 공백으로 구분되어 입력된다. 

두 번째 줄부터 M+1번째 줄까지 i번째 도로의 시작점, 끝점, 그리고 이 도로를 지나는데 필요한 소요시간 Ti가 들어온다. 

시작점과 끝점이 같은 도로는 없으며, 시작점과 한 도시 A에서 다른 도시 B로 가는 도로의 개수는 최대 1개이다.

모든 학생들은 집에서 X에 갈수 있고, X에서 집으로 돌아올 수 있는 데이터만 입력으로 주어진다.
}

출력
{
첫 번째 줄에 N명의 학생들 중 오고 가는데 가장 오래 걸리는 학생의 소요시간을 출력한다.
}

예제 입력 1 
{
4 8 2
1 2 4
1 3 2
1 4 7
2 1 1
2 3 5
3 1 2
3 4 4
4 2 3
}

예제 출력 1 
{
10
}

풀이 방법
{
    그래프 이론을 이용한 문제이다.

    N x N 배열을 생성하고 그 안에 각 출발지 부터 도착지 까지 걸리는 최단 거리를 넣어준다.

    ex. 2번 도시가 도착지인 경우에 answer[i] = graph[i][2] + graph[2][i]

    max(answer[i])를 이용하여 가장 오래걸리는 학생의 시간을 구할 수 있다.

    시작점 잡고 주어진 도로의 개수 다 돌려보기 (총 도시의 개수 1000, 총 도로의 개수 10000) 10 ^ 7 < 10 ^ 9

    위의 방법은 모든 도로를 돌려도 해결하지 못하는 방법이다.

    따라서, 기존에 생각했던 다익스트라 알고리즘을 이용하여 문제를 해결하겠다.

    다익스트라 알고리즘은 시작 노드에서 나머지 모든 노드로 가는 최단 거리를 구하는 알고리즘이다.

    따라서, 시작노드에 도시의 수만큼 넣어주고 반복하게 된다면 각 시작 노드에서 이외의 모든 노드에 접근하는 최소값을 알 수 있다. 
    
    (단, 시간 초과를 방지하기 위해 priority queue를 이용해서 해결해야 한다.)

}