퍼즐

문제
{
3×3 표에 다음과 같이 수가 채워져 있다. 오른쪽 아래 가장 끝 칸은 비어 있는 칸이다.


1	2	3
4	5	6
7	8	 

어떤 수와 인접해 있는 네 개의 칸 중에 하나가 비어 있으면, 수를 그 칸으로 이동시킬 수가 있다. 물론 표 바깥으로 나가는 경우는 불가능하다. 우리의 목표는 초기 상태가 주어졌을 때, 최소의 이동으로 위와 같은 정리된 상태를 만드는 것이다. 다음의 예를 보자.

1	 	3
4	2	5
7	8	6

1	2	3
4	 	5
7	8	6

1	2	3
4	5	 
7	8	6

1	2	3
4	5	6
7	8	 

가장 윗 상태에서 세 번의 이동을 통해 정리된 상태를 만들 수 있다. 이와 같이 최소 이동 횟수를 구하는 프로그램을 작성하시오.
}

입력
{
세 줄에 걸쳐서 표에 채워져 있는 아홉 개의 수가 주어진다. 한 줄에 세 개의 수가 주어지며, 빈 칸은 0으로 나타낸다.
}

출력
{
첫째 줄에 최소의 이동 횟수를 출력한다. 이동이 불가능한 경우 -1을 출력한다.
}

예제 입력 1 
{
1 0 3
4 2 5
7 8 6
}

예제 출력 1 
{
3
}

예제 입력 2 
{
3 6 0
8 1 2
7 4 5
}

예제 출력 2 
{
-1
}

풀이 방법
{
    BFS를 사용하되 메모리의 사용을 잘 해야하는 문제

    단순하게 visit = [] 만들고 그 안에 가능한 모든 경우의 수를 집어 넣은 뒤 방문한 적이 있다면 queue에 넣지 않는 형식으로 BFS를 돌리려고 했다.

    문제는 단순 리스트로 제작했기에 시간이 너무 오래 걸렸고 메모리도 문제가 발생했다.

    따라서, 리스트가 아닌 dict를 사용하고 실제 3x3 짜리 배열을 제작하는 것이 아닌 "012345678" 문자열을 갖고 풀어야하는 문제였다.
}

느낀점
{
    생각보다 아직 파이썬 문법에 대해서 잘 모르는 것 같다.

    특히, 문자열은 많이 부족한 것 같다.(dcit와 문자열에 대한 문제를 자주 풀어봐야 겠다.) => index로 접근하여 값 변경 불가

    dict는 해쉬와 마찬가지로 키값으로 바로바로 정보에 접근하기 떄문에 탐색 시간이 상수시간인 O(1)이 걸린다.
}