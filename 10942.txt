팰린드롬?

문제
{
명우는 홍준이와 함께 팰린드롬 놀이를 해보려고 한다.

먼저, 홍준이는 자연수 N개를 칠판에 적는다. 그 다음, 명우에게 질문을 총 M번 한다.

각 질문은 두 정수 S와 E(1 ≤ S ≤ E ≤ N)로 나타낼 수 있으며, S번째 수부터 E번째 까지 수가 팰린드롬을 이루는지를 물어보며, 명우는 각 질문에 대해 팰린드롬이다 또는 아니다를 말해야 한다.

예를 들어, 홍준이가 칠판에 적은 수가 1, 2, 1, 3, 1, 2, 1라고 하자.

S = 1, E = 3인 경우 1, 2, 1은 팰린드롬이다.
S = 2, E = 5인 경우 2, 1, 3, 1은 팰린드롬이 아니다.
S = 3, E = 3인 경우 1은 팰린드롬이다.
S = 5, E = 7인 경우 1, 2, 1은 팰린드롬이다.
자연수 N개와 질문 M개가 모두 주어졌을 때, 명우의 대답을 구하는 프로그램을 작성하시오.
}

입력
{
첫째 줄에 수열의 크기 N (1 ≤ N ≤ 2,000)이 주어진다.

둘째 줄에는 홍준이가 칠판에 적은 수 N개가 순서대로 주어진다. 칠판에 적은 수는 100,000보다 작거나 같은 자연수이다.

셋째 줄에는 홍준이가 한 질문의 개수 M (1 ≤ M ≤ 1,000,000)이 주어진다.

넷째 줄부터 M개의 줄에는 홍준이가 명우에게 한 질문 S와 E가 한 줄에 하나씩 주어진다.
}

출력
{
총 M개의 줄에 걸쳐 홍준이의 질문에 대한 명우의 답을 입력으로 주어진 순서에 따라서 출력한다. 팰린드롬인 경우에는 1, 아닌 경우에는 0을 출력한다.
}

예제 입력 1 
{
7
1 2 1 3 1 2 1
4
1 3
2 5
3 3
5 7
}

예제 출력 1 
{
1
0
1
1
}

풀이 방법
{
    (0,1), (1,2), ... , (n-2,n-1) => 2개씩

    (0,2), (1,3), ... , (n-3,n-1) => 3개씩

    위의 값을 미리 dp 배열에 가능한 조합인지 넣어 놓고 나머지 조합을 반복문을 이용하여 재귀문과 비슷한 형식으로 문제를 해결할 수 있다.

    ex. (0,3)의 답을 알고 싶은 경우 => 4개짜리 dp[1][2] == 1 and data[0] == data[3]  => dp[0][3] = 1 이런식으로 계속해서 진행하면 풀 수 있다.

    시간 복잡도는 O(n ^ 2) 이기에 최대 숫자인 2000이 들어와도 4,000,000이 걸리기 때문에 주어진 1.5초 안에는 무조건 풀 수 있다. 

    하지만, 실제로 문제를 푸는데 가장 어려웠던 것이 시간초과였다.

    알고리즘 상으로는 문제를 푸는데 시간초과가 나지 않을 것으로 예상했지만 시간초과가 발생했다.

    따라서, 해당 문제는 알고리즘의 문제가 아닌 입력 받는 시간이 오래걸려서 발생한 문제였다.

    input = sys.stdin.readline

    상단의 코드를 추가하여 문제를 해결할 수 있었다.
}