보물섬

문제
{
보물섬 지도를 발견한 후크 선장은 보물을 찾아나섰다. 보물섬 지도는 아래 그림과 같이 직사각형 모양이며 여러 칸으로 나뉘어져 있다. 각 칸은 육지(L)나 바다(W)로 표시되어 있다. 이 지도에서 이동은 상하좌우로 이웃한 육지로만 가능하며, 한 칸 이동하는데 한 시간이 걸린다. 보물은 서로 간에 최단 거리로 이동하는데 있어 가장 긴 시간이 걸리는 육지 두 곳에 나뉘어 묻혀있다. 육지를 나타내는 두 곳 사이를 최단 거리로 이동하려면 같은 곳을 두 번 이상 지나가거나, 멀리 돌아가서는 안 된다.



예를 들어 위와 같이 지도가 주어졌다면 보물은 아래 표시된 두 곳에 묻혀 있게 되고, 이 둘 사이의 최단 거리로 이동하는 시간은 8시간이 된다.



보물 지도가 주어질 때, 보물이 묻혀 있는 두 곳 간의 최단 거리로 이동하는 시간을 구하는 프로그램을 작성하시오.
}

입력
{
첫째 줄에는 보물 지도의 세로의 크기와 가로의 크기가 빈칸을 사이에 두고 주어진다. 이어 L과 W로 표시된 보물 지도가 아래의 예와 같이 주어지며, 각 문자 사이에는 빈 칸이 없다. 보물 지도의 가로, 세로의 크기는 각각 50이하이다.
}

출력
{
    첫째 줄에 보물이 묻혀 있는 두 곳 사이를 최단 거리로 이동하는 시간을 출력한다.
}


예제 입력 1 
{
5 7
WLLWWWL
LLLWLLL
LWLWLWW
LWLWLLL
WLLWLWW
}

예제 출력 1 
{
    8
}

풀이 방법
{
    DFS/BFS를 이용하여 문제를 해결할 수 있다.

    visit배열을 매번 돌 때마다 초기화 해주며 가장 멀리 간 경우의 값을 출력하면 문제를 해결할 수 있다.

    모든 L에서 DFS를 돌려주고 가장 큰 값을 return한 뒤에 answer값에 계속하여 가장 큰 값을 받아 출력하면 된다.

    여기서, 중요한 점은 매번 첫 DFS를 돌려줄 때 visit 배열을 -1로 초기화 시켜줘야 한다.
}

풀이 방법2
{
    위의 방식과 다르게 BFS로 문제를 해결했다.

    BFS의 경우 이미 접근한 경우가 최선이기 때문에 비교하지 않아도 되지만

    DFS의 경우(풀이1의 경우) 현재 경로가 최선인지 비교하는 과정이 있어 시간이 더 오래걸린다.

    따라서, BFS를 이용하여 문제를 해결할 수 있었다.
}

느낀 점
{
    전혀 틀린게 없다고 생각하고 제출했는데 알고보니 변수명을 동일하게 한 반복문이 있었다.

    파이썬은 그런 부분을 에러처리 하지 않고 넘어가지만 코딩테스트에서는 각별히 주의해야 한다.
}