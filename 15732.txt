도토리 숨기기

문제
{
HEPC 1등 상금으로 도토리 D개를 받은 욕심많은 다람쥐 수형이는 자신의 모든 도토리를 뺏기지 않게 보관하려고 한다. 

수형이는 1부터 N까지의 번호가 붙여있는 N개의 상자를 가지고 있고 이 안에 도토리를 넣어 다른 다람쥐들이 찾지 못하게 전부 숨기려고 한다. 

상자가 너무 많아 도토리가 있는 상자를 모두 외울 수 없는 수형이는 A번 상자부터 B번 상자까지 C개 간격으로 도토리를 하나씩 더 넣는 규칙을 만들었다! 

다른 다람쥐들이 규칙을 눈치채고 모든 도토리를 잃는 것이 무서운 나머지 이러한 규칙들을 K개를 만들어 도토리를 최대한 안전하게 저장해 놓으려고 한다. 

예를 들어 100번 상자부터 150번상자까지 10개 간격으로, 110번 상자부터 150번 상자까지 15개 간격으로 넣는다면 100, 110, 120, 125, 130, 140, 150번 상자에

도토리가 있으며 110번 상자와 140번 상자에는 2개의 도토리가 들어가 있게 된다. 

상자 하나에 들어갈 수 있는 도토리의 개수는 제한이 없으며 앞의 상자부터 최대한 꽉꽉 채워나간다고 했을 때 

마지막 도토리가 들어가 있는 상자의 번호를 출력하는 프로그램을 작성하시오.
}

입력
{
첫째 줄에 상자의 개수 N(1 ≤ N ≤ 1,000,000)과 규칙의 개수 K(1 ≤ K ≤ 10,000), 도토리의 개수 D(1 ≤ D ≤ 1,000,000,000)가 주어진다. 

그 후 K개 줄에는 A, B, C(1 ≤ C ≤ A ≤ B ≤ N)가 주어지며 A번 상자부터 B번 상자까지 C개 간격으로 도토리를 하나씩 넣는 규칙을 뜻한다. 

D는 모든 규칙으로 넣을 수 있는 도토리의 수보다 같거나 작다.
}

출력
D개의 도토리를 규칙에 맞게 상자 앞에서부터 넣었을 때 마지막 도토리가 들어가는 상자의 번호를 출력하시오.

예제 입력 1 
200 2 5
100 150 10
110 150 15
예제 출력 1 
125

풀이 방법
{
    우선순위 큐를 이용하여 문제를 해결할 수 있다.

    모든 규칙에 관한 상자의 번호를 넣고 주어진  도토리의 개수만큼 pop하면 문제를 해결할 수 있다.

    -- 메모리 초과
}

풀이 방법2
{
    누적합 & 이진탐색?

    누적합 : 상자 누적합 배열 생성(box[1] = box1까지 담을 수 있는 도토리의 개수, box[5] = box5까지 담을 수 있는 도토리의 개수)

    위의 누적합 배열을 생성하고 index값을 이진 탐색하여 주어진 도토리의 개수보다 해당 인덱스의 누적합 배열이 작거나 같다면 low = mid + 1

    크면 high = mid - 1
}


풀이 방법3
{
    이진탐색을 이용한다.

    풀이 방법2에서도 이진탐색을 이용했지만 시간초과가 발생하게 됐다.

    누적합을 생성하는 과정에서 발생한 문제였다. 따라서, 기존의 이진탐색의 구조를 조금 바꾸면 문제를 해결할 수 있다.

    풀이 방법2에서는 mid 값을 들어온 박스의 크기 순서로 정렬한 뒤의 박스의 인덱스 값을 이용했는데

    이번에는 mid값을 그대로 박스의 크기를 나타내는 값으로 하여 이진탐색을 시도했다.

    예를 들어, mid = 200 이면 200 크기의 박스까지 도토리를 넣는 다는 뜻이 되고

    M개의 규칙에서 받아온 값들을 하나하나 반복문을 돌리며 mid 값(200)보다 현재 박스가 작은 경우에 넣어주면 된다는 것이다.

    이렇게 되면 굳이 들어온 값에 대한 누적합을 만드는 수고 없이 시간도 절약하여 문제를 해결할 수 있다. 
    
    대신 내부의 if문을 좀 더 잘 설정해야 문제를 해결할 수 있다. 또한, 박스에 도토리를 넣는 cnt 변수를 선언하여 현재 mid값에 대하여

    도토리가 들어간 수와 주어진 d 값을 비교하여 left와 right값을 변경해야 한다.

    위의 누적합 배열을 생성하고 index값을 이진 탐색하여 주어진 도토리의 개수보다 해당 인덱스의 누적합 배열이 크거나 같다면 right = mid + 1, answer = mid

    작다면 left = mid + 1로 설정하고 반복문을 돌리게 되면 문제를 해결할 수 있다.
}

느낀 점
{
    문제가 보기에 쉽다고 해서 쉬운 문제가 아니다. 입력 조건을 잘 보쟈!
}