벽 부수고 이동하기

문제
{
N×M의 행렬로 표현되는 맵이 있다. 맵에서 0은 이동할 수 있는 곳을 나타내고, 1은 이동할 수 없는 벽이 있는 곳을 나타낸다. 

당신은 (1, 1)에서 (N, M)의 위치까지 이동하려 하는데, 이때 최단 경로로 이동하려 한다. 

최단경로는 맵에서 가장 적은 개수의 칸을 지나는 경로를 말하는데, 이때 시작하는 칸과 끝나는 칸도 포함해서 센다.

만약에 이동하는 도중에 한 개의 벽을 부수고 이동하는 것이 좀 더 경로가 짧아진다면, 벽을 한 개 까지 부수고 이동하여도 된다.

한 칸에서 이동할 수 있는 칸은 상하좌우로 인접한 칸이다.

맵이 주어졌을 때, 최단 경로를 구해 내는 프로그램을 작성하시오.
}

입력
{
첫째 줄에 N(1 ≤ N ≤ 1,000), M(1 ≤ M ≤ 1,000)이 주어진다. 다음 N개의 줄에 M개의 숫자로 맵이 주어진다. 

(1, 1)과 (N, M)은 항상 0이라고 가정하자.
}

출력
{
첫째 줄에 최단 거리를 출력한다. 불가능할 때는 -1을 출력한다.
}

예제 입력 1 
{
6 4
0100
1110
1000
0000
0111
0000
}

예제 출력 1 
{
15
}

예제 입력 2 
{
4 4
0111
1111
1111
1110
}

예제 출력 2 
{
    -1
}

풀이 방법
{
    전형적인 BFS/DFS 문제이다 - DP.

    단순하게 생각해서 dp배열을 하나 생성하고 dp[n][m]에 해당하는 값을 구하면 되는데 문제에서 벽을 한번 부서도 된다고 했으니

    조건을 추가한다. dp[n][m][0] == 벽을 하나 부수고 이동한 경우, dp[n][m][1] == 벽을 한번도 부수지 않고 이동한 경우

    위의 두 가지 경우중 최소값을 구하면 된다. min(dp[n][m])

    결국 DFS/BFS를 잘 구현하면 되는 문제이다. 둘 다 사용가능하지만 BFS를 이용해서 문제를 해결했다.

    * 이 문제는 절대로 생각하는 것이 어려운 문제가 전혀 아니었다.  
    
    하지만 자료형을 제대로 사용하지 않으면 시간초과가 발생하는 문제였다.
    
    list()가 아닌 deque를 이용해야만 시간초과가 나지 않는다. 
    
    pop(0)을 진행하는 경우에 list는 배열 형식으로 우측에 있는 값들을 전부 좌측으로 옮겨줘야 하기 때문에 시간초과가 발생한다. 
    
    하지만, deque를 이용하면 연결 리스트이기 때문에 상수시간이 발생한다.

    따라서, list()가 아닌 deque를 사용하는 것이 유리하다.
}

느낀 점
{
    BFS와 같이 queue 를 이용하는 경우에는 무조건 deque를 import 해서 사용하자 !!!
}