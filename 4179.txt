불! 다국어

문제
{
지훈이는 미로에서 일을 한다. 지훈이를 미로에서 탈출하도록 도와주자!

미로에서의 지훈이의 위치와 불이 붙은 위치를 감안해서 지훈이가 불에 타기전에 탈출할 수 있는지의 여부, 그리고 얼마나 빨리 탈출할 수 있는지를 결정해야한다.

지훈이와 불은 매 분마다 한칸씩 수평또는 수직으로(비스듬하게 이동하지 않는다) 이동한다.

불은 각 지점에서 네 방향으로 확산된다.

지훈이는 미로의 가장자리에 접한 공간에서 탈출할 수 있다.

지훈이와 불은 벽이 있는 공간은 통과하지 못한다.
}


입력
{
입력의 첫째 줄에는 공백으로 구분된 두 정수 R과 C가 주어진다. 단, 1 ≤ R, C ≤ 1000 이다. R은 미로 행의 개수, C는 열의 개수이다.

다음 입력으로 R줄동안 각각의 미로 행이 주어진다.

각각의 문자들은 다음을 뜻한다.

#: 벽
.: 지나갈 수 있는 공간
J: 지훈이의 미로에서의 초기위치 (지나갈 수 있는 공간)
F: 불이 난 공간
J는 입력에서 하나만 주어진다.
}


출력
{
지훈이가 불이 도달하기 전에 미로를 탈출 할 수 없는 경우 IMPOSSIBLE 을 출력한다.

지훈이가 미로를 탈출할 수 있는 경우에는 가장 빠른 탈출시간을 출력한다.
}


예제 입력 1 
{
4 4
####
#JF#
#..#
#..#
}

예제 출력 1 
{
3
}

풀이 방법1(실패)
{
    BFS로 문제를 해결할 수 있다.

    불을 먼저 이동한 후에 사람을 이동 시키고 불과 닿지 않는 사람 위치를 queue에 넣는다. 불의 경우에는 모든 경우를 queue에 넣는다.

    단, 사람과 불 둘다 방문 한 곳은 방문하지 않도록 처리한다. 

    이 방법에서 나는 불과 사람이 방문했는지 판단하는 배열을 생성하지 않고 불을 먼저 방문 시키고 실제 맵에 해당하는 문자를 

    바꾸는 과정을 취해 문제를 풀었다.

    하지만, 문자열 내부의 특정 문자를 바꾸는 과정이 시간초과를 발생시켰다.

    현재 상황에서 이동할 수 있는 불을 모두 이동(한번) -> 현재 상황에서 이동할 수 있는 사람을 모두 이동(한번)

    위의 이동방식을 queue가 빌 때 까지 진행했다.
}

풀이 방법2(성공)
{
    위의 방법과 다르게 불과 사람의 방문 기록을 저장하는 배열을 생성했다.

    단순히 방문했는지 방문하지 않았는지 따지는 배열이 아니라 현재 위치에 오는 데 걸리는 시간을 넣은 배열이다.

    위와 같이 한 이유는 불이 이동 가능한 곳은 모두 이동 시키고 이후에 사람을 이동할 수 있는 모든 공간으로 이동시킨 뒤에

    값을 비교하여 사람의 이동값이 불의 이동값과 비교했을 때 작은 경우에만 가능한 것으로 판단하기 위함이다.

    결과적으로 불과 사람이 이동 가능한 모든 배열을 만들고 값을 비교하여 최종 사람이 가장자리에 도착할 수 있는지 따져 문제를 해결했다.
}