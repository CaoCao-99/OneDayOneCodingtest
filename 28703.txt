Double It

문제
{
양의 정수로 이루어진 길이가 N인 배열 A_1 ~ A_N이 주어집니다. 당신은 원하는 만큼 다음 조작을 할 수 있습니다.

배열에서 원하는 수 하나를 골라서 2를 곱합니다. 조작 이후 A_1, \cdots, A_N의 최댓값과 최솟값의 차이로 가능한 최솟값을 구하세요.
}

입력
{
첫 줄에 배열의 길이 N이 주어집니다. (1 \le N \le 200\,000) 

둘째 줄에 N개의 양의 정수 A_1, A_2, \cdots, A_N이 주어집니다. (1 \le A_i \le 10^9) 
}

출력
{
조작 이후 A_1, \cdots, A_N의 최댓값과 최솟값의 차이로 가능한 최솟값을 구하세요.
}


예제 입력 1 
{
6
31 41 51 92 65 3
}

예제 출력 1 
{
40
}

풀이 방법
{
    우선순위 큐를 이용하면 문제를 해결할 수 있다.

    최소 우선순위 큐와 최대 우선순위 큐를 생성하여 모든 데이터를 넣어주고 최대 큐에서 pop한 값과 최소 큐에서 pop한 값의 차이를 기존의 answer 값과 비교하며

    갱신해준다. 위에서 pop한 최소값은 2배를 취하여 최대 큐에 넣어준다. 마찬가지로 2배를 취한 값은 최소 큐에도 넣어준다.

    여기서 놓칠 수 있는 부분이 있는데 현재 차이 값을 구하기 위해 최대 큐에서 빼주었던 값도 다시 최대큐에 넣어주어야 한다.

    이제 관건은 언제까지 위의 행동을 반복하느냐 인데 처음 데이터 값 중 가장 큰 값을 최소 * 2배값보다 작은 경우 반복해주면 된다.

    그렇게 가장 작은 최소값을 찾으면 문제를 해결할 수 있다.
}

