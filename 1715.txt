카드 정렬하기

문제
{
정렬된 두 묶음의 숫자 카드가 있다고 하자. 각 묶음의 카드의 수를 A, B라 하면 보통 두 묶음을 합쳐서 하나로 만드는 데에는 A+B 번의 비교를 해야 한다. 

이를테면, 20장의 숫자 카드 묶음과 30장의 숫자 카드 묶음을 합치려면 50번의 비교가 필요하다.

매우 많은 숫자 카드 묶음이 책상 위에 놓여 있다. 이들을 두 묶음씩 골라 서로 합쳐나간다면, 고르는 순서에 따라서 비교 횟수가 매우 달라진다. 

예를 들어 10장, 20장, 40장의 묶음이 있다면 10장과 20장을 합친 뒤, 합친 30장 묶음과 40장을 합친다면 (10 + 20) + (30 + 40) = 100번의 비교가 필요하다. 

그러나 10장과 40장을 합친 뒤, 합친 50장 묶음과 20장을 합친다면 (10 + 40) + (50 + 20) = 120 번의 비교가 필요하므로 덜 효율적인 방법이다.

N개의 숫자 카드 묶음의 각각의 크기가 주어질 때, 최소한 몇 번의 비교가 필요한지를 구하는 프로그램을 작성하시오.
}

입력
{
첫째 줄에 N이 주어진다. (1 ≤ N ≤ 100,000) 이어서 N개의 줄에 걸쳐 숫자 카드 묶음의 각각의 크기가 주어진다. 숫자 카드 묶음의 크기는 1,000보다 작거나 같은 양의 정수이다.
}

출력
{
첫째 줄에 최소 비교 횟수를 출력한다.
}

예제 입력 1 
{
3
10
20
40
}

예제 출력 1 
{
    100
}

풀이 방법(실패)
{
    전형적인 DP 문제라고 판단하고 분단하는 곳을 판단하여 진행하려고 했으나 주어진 n의 값의 범위가 100,000이기에 n^2이면 시간초과 발생.
}

풀이 방법2(실패)
{
    그리디한 접근으로 주어진 값을 오름차순 정렬하여 누적합을 진행하듯이 문제를 해결하려고 했으나 예외 상황 발생((2,2), (3,3))
}

풀이 방법3(성공)
{
    우선순위 큐를 이용하여 문제를 해결했다.

    우선순위 큐에서 가장 작은 값을 pop한 이후에 그 다음값과 비교하여 다음 값이 현재 가장 작은 값보다 크다면 다음 값을 그대로 큐에 넣어준다. (이전에 pop했던  값도 동일하게 넣어준다.)

    이후, 가장 작은 값을 또 pop하고 그 다음으로 작은 값과 비교해준다. 만약 다음 값이 현재 가장 작은 값보다 작거나 같다면(사실 같은 경우만 가능하다.) 합친 값을 큐에 넣어준다. (합치는 경우에는 answer값에 넣어주기)

    우선순위 큐가 빌 때까지 반복하면(== 모든 덱이 하나의 덱이 됐을 경우) 종료하고 answer 값을 출력하여 문제를 해결할 수 있다.
}